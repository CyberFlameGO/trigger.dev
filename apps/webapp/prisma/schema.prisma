datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["orderByNulls"]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  authenticationMethod      AuthenticationMethod
  accessToken               String?
  authenticationProfile     Json?
  authenticationExtraParams Json?

  displayName String?
  name        String?
  avatarUrl   String?

  admin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations Organization[]
}

enum AuthenticationMethod {
  GITHUB
  MAGIC_LINK
}

model Organization {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users            User[]
  workflows        Workflow[]
  environments     RuntimeEnvironment[]
  apiConnections   APIConnection[]
  events           TriggerEvent[]
  externalSources  ExternalSource[]
  eventRules       EventRule[]
  schedulerSources SchedulerSource[]
}

model APIConnection {
  id    String @id @default(cuid())
  title String

  apiIdentifier String
  status        APIConnectionStatus @default(CREATED)
  scopes        String[]

  authenticationMethod APIAuthenticationMethod @default(OAUTH)
  authenticationConfig Json?

  type APIConnectionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  externalSources  ExternalSource[]
  externalServices ExternalService[]
}

enum APIAuthenticationMethod {
  OAUTH
  API_KEY
}

enum APIConnectionType {
  HTTP
  GRAPHQL
}

enum APIConnectionStatus {
  CREATED
  CONNECTED
}

model RuntimeEnvironment {
  id     String @id @default(cuid())
  slug   String
  apiKey String @unique

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events           TriggerEvent[]
  runs             WorkflowRun[]
  eventRules       EventRule[]
  schedulerSources SchedulerSource[]

  @@unique([organizationId, slug])
}

model Workflow {
  id    String @id @default(cuid())
  slug  String
  title String

  packageJson Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  type   TriggerType
  status WorkflowStatus @default(CREATED)

  externalSource   ExternalSource? @relation(fields: [externalSourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalSourceId String?

  runs             WorkflowRun[]
  rules            EventRule[]
  externalServices ExternalService[]
  schedulerSources SchedulerSource[]

  service    String   @default("trigger")
  eventNames String[]

  disabledAt DateTime?
  archivedAt DateTime?
  isArchived Boolean   @default(false)

  triggerTtlInSeconds Int @default(3600)

  @@unique([organizationId, slug])
}

model EventRule {
  id String @id @default(cuid())

  type TriggerType

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  filter  Json
  trigger Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  runs WorkflowRun[]

  @@unique([workflowId, environmentId])
}

enum TriggerType {
  WEBHOOK
  SCHEDULE
  CUSTOM_EVENT
  HTTP_ENDPOINT
  EVENT_BRIDGE
  HTTP_POLLING
}

enum WorkflowStatus {
  CREATED
  READY
  DISABLED
}

model ExternalSource {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  service String

  workflows    Workflow[]
  type         ExternalSourceType
  key          String
  source       Json
  status       ExternalSourceStatus @default(CREATED)
  externalData Json?
  secret       String?

  readyAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  connection   APIConnection? @relation(fields: [connectionId], references: [id], onDelete: SetNull)
  connectionId String?

  @@unique([organizationId, key])
}

enum ExternalSourceStatus {
  CREATED
  READY
  CANCELLED
}

enum ExternalSourceType {
  WEBHOOK
  EVENT_BRIDGE
  HTTP_POLLING
}

model SchedulerSource {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  schedule Json

  status SchedulerSourceStatus @default(CREATED)

  readyAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([workflowId, environmentId])
}

enum SchedulerSourceStatus {
  CREATED
  READY
  CANCELLED
}

model ExternalService {
  id      String @id @default(cuid())
  slug    String
  service String

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  connection   APIConnection? @relation(fields: [connectionId], references: [id], onDelete: SetNull)
  connectionId String?

  type   ExternalServiceType
  status ExternalServiceStatus @default(CREATED)

  readyAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  requests IntegrationRequest[]

  @@unique([workflowId, slug])
}

enum ExternalServiceType {
  HTTP_API
}

enum ExternalServiceStatus {
  CREATED
  READY
}

model IntegrationRequest {
  id String @id @default(cuid())

  params   Json
  endpoint String

  externalService   ExternalService @relation(fields: [externalServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalServiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status IntegrationRequestStatus @default(PENDING)

  run   WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  step   WorkflowRunStep @relation(fields: [stepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stepId String          @unique

  retryCount Int                   @default(0)
  error      Json?
  response   Json?
  responses  IntegrationResponse[]
}

enum IntegrationRequestStatus {
  PENDING
  WAITING_FOR_CONNECTION
  FETCHING
  RETRYING
  SUCCESS
  ERROR
}

model IntegrationResponse {
  id String @id @default(cuid())

  request   IntegrationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestId String

  output  Json
  context Json

  createdAt DateTime @default(now())
}

model DurableDelay {
  id String @id @default(cuid())

  run   WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  step   WorkflowRunStep @relation(fields: [stepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stepId String          @unique

  delayUntil DateTime

  createdAt  DateTime  @default(now())
  resolvedAt DateTime?
}

model TriggerEvent {
  id        String      @id @default(cuid())
  service   String
  name      String
  type      TriggerType
  timestamp DateTime    @default(now())
  payload   Json
  context   Json?
  key       String?

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?

  environment   RuntimeEnvironment? @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String?

  status      TriggerEventStatus @default(PENDING)
  WorkflowRun WorkflowRun[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  dispatchedAt DateTime?

  isTest Boolean @default(false)
}

enum TriggerEventStatus {
  PENDING
  DISPATCHED
}

model WorkflowRun {
  id String @id @default(cuid())

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  eventRule   EventRule @relation(fields: [eventRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventRuleId String

  tasks WorkflowRunStep[]

  event   TriggerEvent @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  error Json?

  status WorkflowRunStatus @default(PENDING)

  attemptCount Int @default(0)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startedAt  DateTime?
  finishedAt DateTime?

  timedOutAt     DateTime?
  timedOutReason String?

  isTest        Boolean              @default(false)
  requests      IntegrationRequest[]
  delays        DurableDelay[]
  fetchRequests FetchRequest[]
}

enum WorkflowRunStatus {
  PENDING
  RUNNING
  DISCONNECTED
  SUCCESS
  ERROR
  TIMED_OUT
}

model WorkflowRunStep {
  id String @id @default(cuid())

  run   WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  idempotencyKey String
  ts             String

  type    WorkflowRunStepType
  input   Json?
  output  Json?
  context Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startedAt  DateTime?
  finishedAt DateTime?

  status WorkflowRunStepStatus @default(PENDING)

  integrationRequest IntegrationRequest?
  delay              DurableDelay?
  fetchRequest       FetchRequest?

  @@unique([runId, idempotencyKey])
}

enum WorkflowRunStepStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

enum WorkflowRunStepType {
  OUTPUT
  LOG_MESSAGE
  DURABLE_DELAY
  CUSTOM_EVENT
  INTEGRATION_REQUEST
  DISCONNECTION
  FETCH_REQUEST
}

model FetchRequest {
  id String @id @default(cuid())

  fetch Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status FetchRequestStatus @default(PENDING)

  run   WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  step   WorkflowRunStep @relation(fields: [stepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stepId String          @unique

  retryCount Int             @default(0)
  error      Json?
  response   Json?
  responses  FetchResponse[]
}

enum FetchRequestStatus {
  PENDING
  FETCHING
  RETRYING
  SUCCESS
  ERROR
}

model FetchResponse {
  id String @id @default(cuid())

  request   FetchRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestId String

  output  Json
  context Json

  createdAt DateTime @default(now())
}
